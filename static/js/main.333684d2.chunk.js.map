{"version":3,"sources":["password.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["generatePass","props","size","strong","data","locBigLet","locSmLet","locDigit","locSymbol","prevType","awailableComponents","isBigLetter","concat","isSmLetter","isNumbers","isSymbol","index","components","slice","length","filter","item","usedComponent","Math","floor","random","tmp","max","symbol","replace","App","React","useState","passwordProps","setPasswordProps","password","setPassword","useEffect","toast","notify","position","duration","type","handlePasswordParamChange","e","target","name","checked","pas","Container","fluid","className","Row","lg","Col","Card","Body","Title","Form","Group","InputGroup","FormControl","value","readOnly","id","aria-label","onClick","navigator","clipboard","writeText","Check","label","onChange","event","custom","FormGroup","Switch","Button","variant","block","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.333684d2.chunk.js","sourcesContent":["const bigLet = \"ABCDEFHKLMNPQRSTUWXYZ\";\nconst smalLet = \"abcdefghkmnopqrstuvwxyz\";\nconst digit = \"23456789\";\nconst symb = \"~@#%^&*()-+=[]\\\\/\";\n\nexport interface PasswordProps {\n  strong : boolean,\n  isBigLetter : boolean,\n  isSmLetter : boolean,\n  isNumbers : boolean\n  isSymbol : boolean\n}\n\nfunction generatePass(props : PasswordProps) {\n    const size= props.strong ? 16 : 8;\n    let data:string = '';\n    let locBigLet = bigLet;\n    let locSmLet = smalLet;\n    let locDigit = digit;\n    let locSymbol = symb;\n    let prevType = ''\n    // const awailableComponents = Array<string>().concat(\"isBigLetter\").concat(\"isSmLetter\").concat(\"isNumbers\").concat(\"isSymbol\")\n    let awailableComponents:Array<string> = [] ;\n    if (props.isBigLetter) {\n      awailableComponents = awailableComponents.concat(\"isBigLetter\")     \n    }\n    if (props.isSmLetter) {\n      awailableComponents = awailableComponents.concat(\"isSmLetter\")\n    }\n    if (props.isNumbers) {\n      awailableComponents = awailableComponents.concat(\"isNumbers\")\n    }\n    if (props.isSymbol) {\n      awailableComponents = awailableComponents.concat(\"isSymbol\")\n    }\n  \n    for (let index = 0; index < size; index++) {\n\n      let components = awailableComponents.slice()\n      // delete components[prevType]\n\n\n      if (components.length>1) {\n        // eslint-disable-next-line no-loop-func      \n        components = components.filter( (item) => (item!==prevType)) //Исключаем повторение одинаковых символов\n      }      \n\n      const paramIndex = Math.floor(Math.random() * components.length);\n      let usedComponent = components[paramIndex]      \n \n      prevType = usedComponent.slice()\n\n      let tmp:string = '';\n      switch (usedComponent) {\n        case 'isBigLetter':\n          tmp =  locBigLet          \n          break;\n        case 'isSmLetter':\n          tmp = locSmLet\n          break\n        case 'isNumbers':\n          tmp = locDigit\n          break\n        case 'isSymbol':\n          tmp = locSymbol\n          break\n      }\n\n      // const tmp = '';\n      const max = tmp.length\n      const code = Math.floor(Math.random()*max)\n      const symbol = tmp[code];\n      data = data.concat(\n        symbol\n      )\n\n      // tmp = tmp.replace(symbol,'')\n      switch (usedComponent) { //Необходимо рефакторить\n        case 'isBigLetter':\n          locBigLet =  locBigLet.replace(symbol,'')\n          break;\n        case 'isSmLetter':\n          locSmLet = locSmLet.replace(symbol,'')\n          break\n        case 'isNumbers':\n          locDigit = locDigit.replace(symbol,'')\n          break\n        case 'isSymbol':\n          locSymbol = locSymbol.replace(symbol,'')\n          break\n      }\n    \n    }\n    // navigator.clipboard.writeText('')\n\n    return data;\n}\n\nexport {generatePass}","import React, {ChangeEvent, useEffect} from 'react';\n\n// import logo from './logo.svg';\n\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport FormGroup from 'react-bootstrap/esm/FormGroup';\n\nimport toast from 'toasted-notes' \n// import { getPriority } from 'os';\n\n// import IconKey from \"./images/key-solid.svg\";\n// import IconCopy from \"./images/copy-regular.svg\"\n\nimport { generatePass, PasswordProps } from \"./password\";\n\nimport 'toasted-notes/src/styles.css';\nimport './App.scss';\n\n\n\n// function pluck<T, K extends keyof T>(o: T, propertyNames: K[]): T[K][] {\n//   return propertyNames.map((n) => o[n]);\n// }\n\n// function getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n//   return o[propertyName]; // o[propertyName] is of type T[K]\n// }\n\nfunction App() {\n\n  const [passwordProps, setPasswordProps] = React.useState<PasswordProps>({\n    strong: false,\n    isBigLetter: true,\n    isSmLetter: true,\n    isNumbers: true,\n    isSymbol: true\n  })\n  const [password,setPassword] = React.useState<string>(''/*generatePass(passwordProps)*/)\n\n  //navigator.clipboard.writeText\n  useEffect(()=>{\n\n      setPassword(generatePass(passwordProps))\n      \n  },[ passwordProps])\n\n\n  useEffect(()=>{    \n    // try {\n    //   navigator.clipboard.writeText('')\n    // } catch (error) {\n    //   console.error(error)\n    // }\n    // let s:ToastPosition='';    \n\n    if(password){\n      toast.notify(\"Пароль сгенерирован\",{\n        position:\"top-right\",\n        duration:1500, \n        type:\"success\"\n      })\n    }\n\n  }, [password])\n\n  const generate = () => {\n    setPassword(generatePass(passwordProps))\n  }\n\n  const copy = () => {\n    navigator.clipboard.writeText(password)\n    toast.notify(\"Пароль скопирован\",{\n      position:\"top-right\",\n      duration:1500, \n      type:\"success\"\n    })\n  }\n\n  const handleStrongPassword = (event:ChangeEvent<HTMLInputElement>) => {\n    const { checked } = event.target;\n      // setStrong(checked)\n      let pas = {...passwordProps};\n      if(pas.isNumbers && !pas.isBigLetter && !pas.isSmLetter && !pas.isSymbol){\n        pas.strong = false\n      } else {\n        pas.strong = checked;\n      }      \n      setPasswordProps(pas)\n      // generate()\n  }\n\n  const handlePasswordParamChange = (e:ChangeEvent<HTMLInputElement>) => {\n    const {name, checked} = e.target;    \n    const pas = {...passwordProps};\n\n    let sw = (pas.isBigLetter ? 1 : 0) + (pas.isSmLetter ? 1 : 0 ) + (pas.isNumbers ? 1 : 0) + (pas.isSymbol ? 1 : 0)\n\n    if(sw>1 || checked){\n        switch (name) {\n          case \"isBigLetter\":           \n            pas.isBigLetter = checked  \n            if ( pas.isNumbers && !pas.isBigLetter && !pas.isSmLetter && !pas.isSymbol ) {\n               pas.strong = false       \n            }  \n            break;\n          case \"isSmLetter\":\n            pas.isSmLetter = checked    \n            if (pas.isNumbers && !pas.isBigLetter && !pas.isSmLetter && !pas.isSymbol ) {\n              pas.strong = false\n            }\n            break\n          case \"isNumbers\":\n            pas.isNumbers = checked\n            break\n          case \"isSymbol\":\n            pas.isSymbol = checked  \n            if ( pas.isNumbers && !pas.isBigLetter && !pas.isSmLetter && !pas.isSymbol ) {\n               pas.strong = false       \n            }          \n            break\n          default:\n            break;\n        }\n\n        setPasswordProps(pas)\n    }\n  }\n\n  return (\n    <Container fluid=\"md\" className=\"Password-app\" >\n      <Row lg={2}></Row>\n      <Row >\n        <Col /*lg={{ span: 6, offset: 3 }} */>\n          <Card>\n            <Card.Body>\n              <Card.Title>Генератор паролей</Card.Title>\n              <Form>\n                <Form.Group>\n                  <InputGroup size=\"lg\">\n                    {/* <InputGroup.Prepend>              \n                      <InputGroup.Text id=\"inputGroup-sizing-lg\">Large</InputGroup.Text>\n                    </InputGroup.Prepend> */}\n                    <FormControl \n                      value={password} \n                      readOnly={true} \n                      id=\"generated_password\"\n                      aria-label=\"Пароль\" \n                      // aria-describedby=\"inputGroup-sizing-sm\" \n                      onClick={copy}\n                    />\n                  </InputGroup>                  \n                </Form.Group>\n                <Form.Group >\n                  <Form.Check\n                    // type=\"checkbox\"\n                    type=\"switch\"\n                    id=\"strongPass\"\n                    name=\"strongPass\"\n                    label=\"Усиленый пароль\"\n                    checked={passwordProps.strong}\n                    onChange={handleStrongPassword}                    \n                    custom\n                  />                  \n                </Form.Group>\n                <FormGroup >\n                  <Form.Switch \n                    id=\"isBigLetter\"\n                    name=\"isBigLetter\"\n                    label=\"Большие буквы\"                   \n                    checked={passwordProps.isBigLetter} \n                    onChange={handlePasswordParamChange}                   \n                  />                  \n                  <Form.Switch \n                    id=\"isSmLetter\"\n                    name=\"isSmLetter\"\n                    label=\"маленькие буквы\"                    \n                    checked={passwordProps.isSmLetter}\n                    onChange={handlePasswordParamChange}\n                  />\n                  <Form.Switch \n                    id=\"isNumbers\"\n                    name=\"isNumbers\"\n                    label=\"Цифры\"\n                    checked={passwordProps.isNumbers}\n                    onChange={handlePasswordParamChange}\n                  />\n                  <Form.Switch\n                    id=\"isSymbol\"\n                    name=\"isSymbol\"\n                    label=\"Символы\"\n                    checked={passwordProps.isSymbol}\n                    onChange={handlePasswordParamChange}\n                    size=\"lg\"\n                  />\n                </FormGroup>                \n                <Button \n                  variant=\"outline-primary\"\n                  onClick={generate}\n                  size=\"lg\"\n                  block\n                >\n                  Сгенерировать пароль\n                </Button>                \n              </Form>\n\n            </Card.Body>\n          </Card>          \n        </Col>\n      </Row>\n      <Row></Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}